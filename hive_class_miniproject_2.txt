# Create a schema
create table parking_violation_2017_dumb_tbl
(
sum_no bigint,
plate_id string,
reg_state string,
plate_type string,
issue_date string,
violation_code int,
vehicle_body_type string,
vehicle_make string,
issuing_agency string,
street_code_1 int,
street_code_2 int,
street_code_3 int,
vehicle_expiration_date int,
violation_location int,
violation_precinct int,
issuer_precinct int,
issuer_code int,
issuer_command string,
issuer_squad string,
violation_time string,
time_first_observed string,
violation_country string,
viloation_in_frontof_or_opposite string,
house_number string,
street_name string,
intersecting_street string,
date_first_obeserved int,
law_section int,
sub_division string,
violation_legal_code string,
days_parking_in_effect string,
from_hours_in_effect string,
to_hours_in_effect string,
vehicle_color string,
unregistered_vehicle int,
vehicle_year int,
meter_number string,
feet_from_curb int,
violation_post_code string,
violation_description string
) row format delimited fields terminated by ','
tblproperties("skip.header.line.count"="1"); 

#Load data
load data local inpath 'file:///home/cloudera/aneesh/parking_violation_2017.csv' into table parking_violation_2017_dumb_tbl;

# creating an table that store data in orc format

create table parking_violation_2017_orc
(
sum_no bigint,
plate_id string,
reg_state string,
plate_type string,
issue_date string,
violation_code int,
vehicle_body_type string,
vehicle_make string,
issuing_agency string,
street_code_1 int,
street_code_2 int,
street_code_3 int,
vehicle_expiration_date int,
violation_location int,
violation_precinct int,
issuer_precinct int,
issuer_code int,
issuer_command string,
issuer_squad string,
violation_time string,
time_first_observed string,
violation_country string,
viloation_in_frontof_or_opposite string,
house_number string,
street_name string,
intersecting_street string,
date_first_obeserved int,
law_section int,
sub_division string,
violation_legal_code string,
days_parking_in_effect string,
from_hours_in_effect string,
to_hours_in_effect string,
vehicle_color string,
unregistered_vehicle int,
vehicle_year int,
meter_number string,
feet_from_curb int,
violation_post_code string,
violation_description string
) stored as orc;

insert overwrite table parking_violation_2017_orc select * from parking_violation_2017_dumb_tbl;


Part-I: Examine the data

1.) Find the total number of tickets for the year.
Ans:  select count(sum_no) as Total_Tickets from parking_violation_2017_orc;
2.) Find out how many unique states the cars which got parking tickets came from.
Ans: select count(distinct reg_state) as State_Count from parking_violation_2017_orc;
3.) Some parking tickets don’t have addresses on them, which is cause for concern. Find out how many such tickets there are(i.e. tickets where either "Street Code 1" or "Street Code 2" or "Street Code 3" is empty )
Ans:  select count(*) as Total_Empty_States from parking_violation_2017_orc where street_code_1=0 or street_code_2=0 or street_code_3=0;

Part-II: Aggregation tasks

1.) How often does each violation code occur? (frequency of violation codes - find the top 5)
Ans: select violation_code, count from (select violation_code, count(violation_code) as count from parking_violation_2017_orc group by violation_code) t1 order by count desc limit 5;

2.) How often does each vehicle body type get a parking ticket? How about the vehicle make? (find the top 5 for both)
Ans: 
a)select vehicle_body_type, count from (select vehicle_body_type, count(vehicle_body_type) as count from parking_violation_2017_orc group by vehicle_body_type) t1 order by count desc limit 5;
b) select vehicle_make, count from (select vehicle_make, count(vehicle_make) as count from parking_violation_2017_orc group by vehicle_make) t1 order by count desc limit 5;

3.) A precinct is a police station that has a certain zone of the city under its command. Find the (5 highest) frequencies of:
      a.) Violating Precincts (this is the precinct of the zone where the violation occurred)
       Ans: select violation_precinct, frequency from (select violation_precinct, count(sum_no) as frequency from parking_violation_2017_orc group by violation_precinct) t1 order by frequency desc limit 5;
      b.) Issuer Precincts (this is the precinct that issued the ticket)
      Ans: select issuer_precinct, frequency from (select issuer_precinct, count(sum_no) as frequency from parking_violation_2017_orc group by issuer_precinct) t1 order by frequency desc limit 5;

4.) Find the violation code frequency across 3 precincts which have issued the most number of tickets - do these precinct zones have an exceptionally high frequency of certain violation codes?
Ans: 
select t3.violation_code, count(t3.violation_code) as violation_code_freq from parking_violation_2017_orc t3
where t3.violation_precinct in 
(select t2.violation_precinct from (select t1.violation_precinct, t1.frequency from (select violation_precinct, count(sum_no) as frequency from parking_violation_2017_orc group by violation_precinct) t1 order by t1.frequency desc limit 3) t2)
group by violation_code; 
or 
select t3.violation_code, count(t3.violation_code) as violation_code_freq from parking_violation_2017_orc t3
where t3.violation_precinct in 
(select violation_precinct from  (select violation_precinct, rank() over(order by frequency desc) as rnk from (select violation_precinct, count(sum_no) as frequency from parking_violation_2017_orc group by violation_precinct) t1) t2 where rnk in (1,2,3))
group by violation_code; 



5.) Find out the properties of parking violations across different times of the day: The Violation Time field is specified in a strange format. Find a way to make this into a time attribute that you can use to divide into groups.
6.) Divide 24 hours into 6 equal discrete bins of time. The intervals you choose are at your discretion. For each of these groups, find the 3 most commonly occurring violations
7.) Now, try another direction. For the 3 most commonly occurring violation codes, find the most common times of day (in terms of the bins from the previous part)
8.) Let’s try and find some seasonality in this data
      a.) First, divide the year into some number of seasons, and find frequencies of tickets for each season. (Hint: A quick Google search reveals the following seasons in NYC: Spring(March, April, March); Summer(June, July, August); Fall(September, October, November); Winter(December, January, February))
      b.)Then, find the 3 most common violations for each of these seasons.